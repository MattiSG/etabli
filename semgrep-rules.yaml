# The cheasheet gives lot of examples to learn specifics for each language (ref: https://semgrep.dev/embed/cheatsheet)
rules:
  - id: node-extract-functions
    options:
      symbolic_propagation: true
    patterns:
      - pattern-either:
          - pattern: |
              $FUNC = (...) => { ... }
          - pattern: |
              function $FUNC(...)
      - metavariable-regex:
          # Most of the time meaningless callbacks
          metavariable: $FUNC
          regex: '^(?!on[A-Z]).*'
      - metavariable-regex:
          # Most of the time components
          metavariable: $FUNC
          regex: '^(?![A-Z]).*'
      - metavariable-pattern:
          # Exclude those being class constructor
          metavariable: $FUNC
          patterns:
            - pattern-not: 'constructor'
    message: 'Function name: $FUNC'
    languages:
      - javascript
      - typescript
    severity: ERROR
    paths:
      exclude:
        - 'tests/**/*'
        - '*.spec.js'
        - '*.spec.ts'
  - id: php-extract-functions
    options:
      symbolic_propagation: true
    patterns:
      - pattern-either:
          # No success to remove the prefix "$" since "$$FUNC" and specific `metavariable-regex` were breaking the analysis, but we are fine the LLM should handle it
          - pattern: |
              $FUNC = function (...) { ... }
          - pattern: |
              function $FUNC(...) { ... }
      - metavariable-regex:
          # Most of the time meaningless callbacks
          metavariable: $FUNC
          regex: '^(?!\$?on[A-Z]).*'
      - metavariable-pattern:
          # Exclude those being class constructor
          metavariable: $FUNC
          patterns:
            - pattern-not: '__construct'
    message: 'Function name: $FUNC'
    languages:
      - php
    severity: ERROR
    paths:
      exclude:
        - 'tests/**/*'
        - '*Test.php'
  - id: ruby-extract-functions
    options:
      symbolic_propagation: true
    patterns:
      - pattern-either:
          - pattern: |
              def $FUNC(...)
                ...
              end
          - pattern: |
              $FUNC = -> (...) { ... }
          - pattern: |
              $FUNC = proc { ... }
      - metavariable-regex:
          # Most of the time meaningless callbacks
          metavariable: $FUNC
          regex: '^(?!\$?on_[a-z]).*'
      - metavariable-pattern:
          # Exclude those being class constructor
          metavariable: $FUNC
          patterns:
            - pattern-not: 'initialize'
    message: 'Function name: $FUNC'
    languages:
      - ruby
    severity: ERROR
    paths:
      exclude:
        - 'tests/**/*'
        - 'spec/**/*'
        - '*_spec.rb'
  - id: python-extract-functions
    options:
      symbolic_propagation: true
    patterns:
      - pattern-either:
          - pattern: |
              def $FUNC(...):
                ...
      - metavariable-regex:
          # Most of the time meaningless callbacks
          metavariable: $FUNC
          regex: '^(?!\$?on_[a-z]).*'
      - metavariable-pattern:
          # Exclude those being class constructor
          metavariable: $FUNC
          patterns:
            - pattern-not: '__init__'
    message: 'Function name: $FUNC'
    languages:
      - python
    severity: ERROR
    paths:
      exclude:
        - 'tests/**/*'
        - 'test_*.py'
  - id: java-extract-functions
    options:
      symbolic_propagation: true
    patterns:
      - pattern-either:
          - pattern: |
              $FUNC = () -> { ... }
          - pattern: |
              $FUNC(...) { ... }
      - metavariable-regex:
          # Most of the time meaningless callbacks
          metavariable: $FUNC
          regex: '^(?!on[A-Z]).*'
      - metavariable-pattern:
          # Exclude the main program function
          # Note: we wanted to exclude the class constructor but since it equals the class name we have no possible pattern... should be fine having it in the final analysis
          metavariable: $FUNC
          patterns:
            - pattern-not: 'main'
    message: 'Function name: $FUNC'
    languages:
      - java
    severity: ERROR
    paths:
      exclude:
        - 'test/**/*'
        - '*Test.java'
        - 'Test*.java'
  - id: golang-extract-functions
    options:
      symbolic_propagation: true
    patterns:
      - pattern: |
          func $FUNC(...) { ... }
      - metavariable-regex:
          # Most of the time meaningless callbacks
          metavariable: $FUNC
          regex: '^(?!on[A-Z]).*'
      - metavariable-regex:
          # In Golang "constructors" are functions named with an uppercase
          metavariable: $FUNC
          regex: '^(?![A-Z]).*'
      - metavariable-pattern:
          # Exclude the main program function
          metavariable: $FUNC
          patterns:
            - pattern-not: 'main'
    message: 'Function name: $FUNC'
    languages:
      - go
    severity: ERROR
    paths:
      exclude:
        - 'tests/**/*'
        - '*_test.go'
  - id: rust-extract-functions
    options:
      symbolic_propagation: true
    patterns:
      - pattern-either:
          - pattern: |
              fn $FUNC(...) {
                ...
              }
          - pattern: |
              let $FUNC = || {
                ...
              };
          # # TODO: not yet working due to Rust being in alpha inside Semgrep, but we are fine since it's a little part of projects
          # # It has to work with both:
          # # - let notification_callback = |a: i32, b: i32| -> i32 {
          # # - let notification_callback = |a: i32, b: i32| {
          # - pattern: |
          #     let $FUNC = |...| ... {
          #       ...
          #     };
      - metavariable-regex:
          # Most of the time meaningless callbacks
          metavariable: $FUNC
          regex: '^(?!\$?on_[a-z]).*'
      - metavariable-pattern:
          # Exclude those being class constructor or main program function
          metavariable: $FUNC
          patterns:
            - pattern-not: 'new'
            - pattern-not: 'main'
    message: 'Function name: $FUNC'
    languages:
      - rust
    severity: ERROR
    paths:
      exclude:
        - 'tests/**/*'
        - '*_test.rs'
  - id: cpp-extract-functions
    options:
      symbolic_propagation: true
    patterns:
      - pattern-either:
          - pattern: |
              $POTENTIAL_RETURN_TYPE $FUNC(...) {
                ...
              }
          # # TODO: not yet working easily so skipping since having basic functions should be fine for now
          # - pattern: |
          #     auto $FUNC = [...](...) {
          #       ...
          #     }
      - metavariable-regex:
          # Most of the time meaningless callbacks
          metavariable: $FUNC
          regex: '^(?!on[A-Z]).*'
      - metavariable-pattern:
          # Exclude the main program function
          # Note: we wanted to exclude the class constructor but since it equals the class name we have no possible pattern... should be fine having it in the final analysis
          metavariable: $FUNC
          patterns:
            - pattern-not: 'main'
    message: 'Function name: $FUNC'
    languages:
      - c++
    severity: ERROR
    paths:
      exclude:
        - 'tests/**/*'
        - '*Test.cpp'
        - '*_test.cpp'
