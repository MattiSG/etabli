version: '3.5'

#
# [IMPORTANT] `container_name` properties are prefixed by the project name to avoid conflicting with other project volumes
#

services:
  postgres:
    container_name: etabli_postgres_container_${DOCKER_COMPOSE_CONTAINER_NAME_SUFFIX:-default}
    # image: postgres:15.5
    image: ankane/pgvector:v0.5.1 # It uses `postgres:15` including the `pgvector` extension, using it for local purpose but needs to see if the extension can be deployed on a provider easily (otherwise fallback to a third-party for vectors)
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
      POSTGRES_DB: ${POSTGRES_DB:-postgres}
      PGDATA: /data/postgres
    volumes:
      - postgres:/data/postgres
    ports:
      - '127.0.0.1:${DOCKER_COMPOSE_HOST_PORTS:-5432:}5432'
    networks:
      - postgres
    restart: unless-stopped
    healthcheck:
      # Note: at start we tried `pg_isready` but it's not efficient since the postgres container restarts the server at startup (to init some scripts) so we ended with broken connections...
      # The best is to try a real query to be sure it's up and running as advised in https://github.com/docker-library/postgres/issues/146#issuecomment-872486465
      test: ['CMD-SHELL', 'psql -h localhost -U $${POSTGRES_USER} -c select 1 -d $${POSTGRES_DB}']
      interval: 1s
      timeout: 3s
      retries: 5

  pgadmin:
    container_name: etabli_pgadmin_container_${DOCKER_COMPOSE_CONTAINER_NAME_SUFFIX:-default}
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin:/var/lib/pgadmin

    ports:
      - '127.0.0.1:${DOCKER_COMPOSE_HOST_PORTS:-5050:}80'
    networks:
      - postgres
    restart: unless-stopped

networks:
  postgres:
    driver: bridge

volumes:
  postgres:
  pgadmin:
